// Copyright (c) 2023 Gor Nishanov
// Licensed under MIT license. See LICENSE.txt for details.

#ifndef _STD_EXPERIMENTAL_CONQUEUE
#define _STD_EXPERIMENTAL_CONQUEUE
#include "__detail/tracing.hpp"

#include <atomic>
#include <deque>
#include <exception>
#include <mutex>
#include <optional>
#include <system_error>

#include <std/experimental/__detail/intrusive_list.hpp>
#include <std/experimental/__detail/ring_buffer.hpp>
#include <std/experimental/__detail/spinlock.hpp>
#include <stdexec/execution.hpp>

namespace std::experimental {
enum class conqueue_errc { success, empty, full, closed };
}

namespace std {
template <>
struct is_error_code_enum<experimental::conqueue_errc> : public true_type {};
} // namespace std

namespace std::experimental {

const error_category& conqueue_category() noexcept;

inline error_code make_error_code(conqueue_errc e) noexcept {
  return {static_cast<int>(e), conqueue_category()};
}

inline error_condition make_error_condition(conqueue_errc e) noexcept {
  return {static_cast<int>(e), conqueue_category()};
}

class conqueue_error : public runtime_error {
  error_code ec;

public:
  explicit conqueue_error(const std::error_code& ec);
  ~conqueue_error() noexcept;

  const error_code& code() const noexcept { return ec; }
};

// Inspired by https://wg21.link/P0260R5 A proposal to add a concurrent queue
// to the standard library and https://wg21.link/p1958 A proposal to add a
// concurrent queue to the standard library

template <typename T, typename Alloc = std::allocator<T>> class buffer_queue {
  buffer_queue() = delete;
  buffer_queue(const buffer_queue&) = delete;
  buffer_queue& operator=(const buffer_queue&) = delete;

  using lock_t = __detail::spinlock;

  struct pop_sender;
  struct push_sender;

  struct pop_waiter {
    optional<T>& result;
    error_code& ec;
    pop_waiter(optional<T>& result, error_code& ec) : result(result), ec(ec) {}

    void (*complete)(pop_waiter*) = {};
    pop_waiter* prev{};
    pop_waiter* next{};
  };

  struct push_waiter {
    error_code& ec;
    explicit push_waiter(error_code& ec) : ec(ec) {}

    void (*complete)(push_waiter*) = {};
    T* lval{};
    const T* rval{};
    push_waiter* prev{};
    push_waiter* next{};
  };

  struct sync_pop_waiter;
  struct sync_push_waiter;

  template <typename IntrusiveList>
  void locked_drain_waiters(unique_lock<lock_t>& lock, IntrusiveList& waiters);

  std::optional<T> locked_pop(unique_lock<lock_t>& lock, error_code& ec);
  std::optional<T> locked_consume(unique_lock<lock_t>& lock, error_code& ec);
  std::optional<T> pop_impl(error_code& ec, bool error_on_empty = false);

  template <typename U>
  bool push_impl(U&& x, error_code& ec, bool error_on_full = false);

public:
  typedef T value_type;
  explicit buffer_queue(size_t max_elems, Alloc alloc = Alloc());
  ~buffer_queue() noexcept;

  // observers
  bool is_closed() noexcept { return closed; }
  size_t capacity() const noexcept { return queue.capacity(); }

  // modifiers
  void close() noexcept;

  T pop();
  std::optional<T> pop(std::error_code& ec);
  std::optional<T> try_pop(std::error_code& ec);

  void push(const T& x);
  bool push(const T& x, error_code& ec);
  bool try_push(const T& x, error_code& ec);

  void push(T&& x);
  bool push(T&& x, error_code& ec);
  bool try_push(T&& x, error_code& ec);

  // async modifiers
  push_sender
  async_push(const T& x) noexcept(is_nothrow_copy_constructible_v<T>);
  push_sender async_push(T&& x) noexcept(is_nothrow_move_constructible_v<T>);
  pop_sender async_pop() noexcept;

private:
  lock_t mutex;
  __detail::ring_buffer<T, Alloc> queue;
  __detail::intrusive_list<&pop_waiter::prev, &pop_waiter::next> pop_waiters;
  __detail::intrusive_list<&push_waiter::prev, &push_waiter::next> push_waiters;
  bool closed{};
};

// Implementation

template <typename T, typename Alloc>
buffer_queue<T, Alloc>::buffer_queue(size_t max_elems, Alloc alloc)
    : queue(max_elems, alloc) {}

template <typename T, typename Alloc>
buffer_queue<T, Alloc>::~buffer_queue() noexcept {
  close();
}

template <typename T, typename Alloc>
template <typename IntrusiveList>
void buffer_queue<T, Alloc>::locked_drain_waiters(unique_lock<lock_t>& lock,
                                                  IntrusiveList& waiters) {
  while (!waiters.empty()) {
    auto* waiter = waiters.pop_front();
    waiter->ec = conqueue_errc::closed;
    lock.unlock();
    waiter->complete(waiter);
    lock.lock();
  }
}

template <typename T, typename Alloc>
void buffer_queue<T, Alloc>::close() noexcept {
  std::unique_lock lock(mutex);
  if (closed)
    return;
  closed = true;
  locked_drain_waiters(lock, pop_waiters);
  locked_drain_waiters(lock, push_waiters);
}

template <typename T, typename Alloc>
template <typename U>
bool buffer_queue<T, Alloc>::push_impl(U&& x, error_code& ec,
                                       bool error_on_full) {
  std::unique_lock lock(mutex);
  if (closed) {
    ec = conqueue_errc::closed;
    return false;
  }

  // Rendezvous with a pop operation if there are any.
  if (!pop_waiters.empty()) {
    auto* waiter = pop_waiters.pop_front();
    waiter->result = std::forward<U>(x);
    waiter->ec = {};
    lock.unlock();
    waiter->complete(waiter);
    ec = {};
    return true;
  }

  if (queue.full()) {
    if (error_on_full) {
      ec = conqueue_errc::full;
      return false;
    }

    sync_push_waiter waiter(std::forward<U>(x), ec);
    STDEX_CONQUEUE_LOG("push: queue is full, putting %p in the waiters queue\n",
                       &waiter);
    push_waiters.push_back(&waiter);
    lock.unlock();
    waiter.wait();
    STDEX_CONQUEUE_LOG("push: was resumed %p\n", &waiter);
    return !ec;
  }

  ec = {};
  queue.push_back(std::forward<U>(x));
  return true;
}

template <typename T, typename Alloc>
bool buffer_queue<T, Alloc>::try_push(T&& x, error_code& ec) {
  return push_impl(std::move(x), ec, true);
}

template <typename T, typename Alloc>
bool buffer_queue<T, Alloc>::try_push(const T& x, error_code& ec) {
  return push_impl(x, ec, true);
}

template <typename T, typename Alloc>
bool buffer_queue<T, Alloc>::push(T&& x, error_code& ec) {
  return push_impl(std::move(x), ec);
}

template <typename T, typename Alloc>
bool buffer_queue<T, Alloc>::push(const T& x, error_code& ec) {
  return push_impl(x, ec);
}

template <typename T, typename Alloc> void buffer_queue<T, Alloc>::push(T&& x) {
  error_code ec;
  if (!push_impl(std::move(x), ec))
    throw conqueue_error(ec);
}

template <typename T, typename Alloc>
void buffer_queue<T, Alloc>::push(const T& x) {
  error_code ec;
  if (!push_impl(x, ec))
    throw conqueue_error(ec);
}

template <typename T, typename Alloc>
struct buffer_queue<T, Alloc>::sync_push_waiter : push_waiter {
  std::atomic_flag flag;

  sync_push_waiter(error_code& ec) noexcept : push_waiter(ec) {
    this->complete = [](push_waiter* w) noexcept {
      auto* self = static_cast<sync_push_waiter*>(w);
      STDEX_CONQUEUE_LOG("notifying sync push waiter %p\n", w);
      self->flag.test_and_set();
      self->flag.notify_one();
    };
  }

  sync_push_waiter(T&& x, error_code& ec) noexcept : sync_push_waiter(ec) {
    this->lval = std::addressof(x);
  }

  sync_push_waiter(const T& x, error_code& ec) noexcept : sync_push_waiter(ec) {
    this->rval = std::addressof(x);
  }

  void wait() noexcept { flag.wait(false); }
};

template <typename T, typename Alloc>
struct buffer_queue<T, Alloc>::sync_pop_waiter : pop_waiter {
  std::atomic_flag flag;

  sync_pop_waiter(optional<T>& value, error_code& ec) noexcept
      : pop_waiter(value, ec) {
    this->complete = [](pop_waiter* w) noexcept {
      auto* self = static_cast<sync_pop_waiter*>(w);
      STDEX_CONQUEUE_LOG("notifying sync push waiter %p\n", w);
      self->flag.test_and_set();
      self->flag.notify_one();
    };
  }

  void wait() noexcept { flag.wait(false); }
};

template <typename T, typename Alloc>
struct buffer_queue<T, Alloc>::push_sender {
  buffer_queue& queue;
  T value;

  using is_sender = void;
  using completion_signatures = // TODO: Cancellation support.
      stdexec::completion_signatures<stdexec::set_value_t(),
                                     stdexec::set_error_t(std::exception_ptr),
                                     stdexec::set_stopped_t()>;

  template <typename Receiver> struct operation : push_waiter {
    buffer_queue& queue;
    Receiver receiver;
    T value;
    std::error_code ec;

    operation(push_sender&& sender, Receiver&& receiver)
        : push_waiter(ec), queue(sender.queue), receiver(std::move(receiver)),
          value(std::move(sender.value)) {
      this->lval = std::addressof(value);
      this->complete = [](push_waiter* w) noexcept {
        auto& op = *static_cast<operation*>(w);
        if (op.ec)
          stdexec::set_error((Receiver&&)op.receiver,
                             make_exception_ptr(conqueue_error(op.ec)));
        else
          stdexec::set_value((Receiver&&)op.receiver);
      };
    }

    friend void tag_invoke(stdexec::start_t, operation& op) noexcept {
      auto& self = op.queue;
      std::unique_lock lock(self.mutex);
      if (self.closed) {
        lock.unlock();
        stdexec::set_error(
            (Receiver&&)op.receiver,
            make_exception_ptr(conqueue_error(conqueue_errc::closed)));
        return;
      }

      // See if there are any waiters, if so, pass the value directly to
      // them.
      if (!self.pop_waiters.empty()) {
        auto* waiter = self.pop_waiters.pop_front();
        waiter->result = std::move(op.value);
        waiter->ec = {};
        lock.unlock();
        STDEX_CONQUEUE_LOG("async push: unlocking reader %p\n", waiter);
        waiter->complete(waiter);
      } else {
        if (self.queue.full()) {
          STDEX_CONQUEUE_LOG(
              "async_push: queue is full, putting %p in the waiters queue\n",
              &op);
          self.push_waiters.push_back(&op);
          return;
        }

        STDEX_CONQUEUE_LOG("async push: queue is not full, pushing value %d\n",
                           op.value);
        self.queue.push_back(std::move(op.value));
      }
      stdexec::set_value((Receiver&&)op.receiver);
    }
  };

  template <stdexec::receiver Receiver>
  friend auto tag_invoke(stdexec::connect_t, push_sender&& s, Receiver&& r)
      -> operation<Receiver> {
    return {std::move(s), std::forward<Receiver>(r)};
  }
};

template <typename T, typename Alloc>
typename buffer_queue<T, Alloc>::push_sender buffer_queue<T, Alloc>::async_push(
    T&& x) noexcept(is_nothrow_move_constructible_v<T>) {
  return {*this, std::move(x)};
}

template <typename T, typename Alloc>
typename buffer_queue<T, Alloc>::push_sender buffer_queue<T, Alloc>::async_push(
    const T& x) noexcept(is_nothrow_copy_constructible_v<T>) {
  return {*this, x};
}

template <typename T, typename Alloc>
std::optional<T>
buffer_queue<T, Alloc>::locked_consume(unique_lock<lock_t>& lock,
                                       error_code& ec) {
  // The queue capacity is zero and there are waiting pushers.
  // Consume directly from the pusher.
  assert(queue.capacity() == 0);

  ec = {};
  std::optional<T> result;

  // Release a single pusher and take its value.
  auto* waiter = push_waiters.pop_front();
  if (auto* lval = waiter->lval)
    result = std::move(*lval);
  else
    result = *waiter->rval;
  lock.unlock();
  STDEX_CONQUEUE_LOG("unlocking pusher %p\n", waiter);
  waiter->complete(waiter);

  return result;
}

template <typename T, typename Alloc>
optional<T> buffer_queue<T, Alloc>::locked_pop(unique_lock<lock_t>& lock,
                                               error_code& ec) {
  // The caller already verified that the queue is not empty.
  ec = {};
  T result = queue.pop_front();
  if (!push_waiters.empty()) {
    // Release a single pusher and put its value into the queue.
    auto* waiter = push_waiters.pop_front();
    if (auto* lval = waiter->lval)
      queue.push_back(std::move(*lval));
    else
      queue.push_back(*waiter->rval);
    lock.unlock();
    STDEX_CONQUEUE_LOG("unlocking pusher %p\n", waiter);
    waiter->complete(waiter);
  }
  return result;
}

template <typename T, typename Alloc>
optional<T> buffer_queue<T, Alloc>::pop_impl(error_code& ec,
                                             bool error_on_empty) {
  std::unique_lock lock(mutex);

  // If the queue is empty, wait for a value to be pushed.
  if (queue.empty()) {
    // Unless, of course, the queue is closed, then return an error.
    if (closed) {
      ec = conqueue_errc::closed;
      return nullopt;
    }

    if (!push_waiters.empty())
      return locked_consume(lock, ec);

    if (error_on_empty) {
      ec = conqueue_errc::empty;
      return nullopt;
    }

    std::optional<T> result;
    sync_pop_waiter waiter(result, ec);
    STDEX_CONQUEUE_LOG("pop: queue is empty, putting %p in the waiters queue\n",
                       &waiter);
    pop_waiters.push_back(&waiter);
    lock.unlock();
    waiter.wait();
    STDEX_CONQUEUE_LOG("pop: %p was just resumed\n", &waiter);
    return result;
  }

  return locked_pop(lock, ec);
}

template <typename T, typename Alloc>
optional<T> buffer_queue<T, Alloc>::try_pop(std::error_code& ec) {
  return pop_impl(ec, true);
}

template <typename T, typename Alloc>
optional<T> buffer_queue<T, Alloc>::pop(error_code& ec) {
  return pop_impl(ec);
}

template <typename T, typename Alloc> T buffer_queue<T, Alloc>::pop() {
  std::error_code ec;
  if (auto result = pop_impl(ec))
    return *result;

  throw conqueue_error(ec);
}

template <typename T, typename Alloc>
struct buffer_queue<T, Alloc>::pop_sender {
  buffer_queue* queue;

  using is_sender = void;
  using completion_signatures = // TODO: Cancellation support.
      stdexec::completion_signatures<stdexec::set_value_t(T),
                                     stdexec::set_error_t(std::exception_ptr),
                                     stdexec::set_stopped_t()>;

  template <typename Receiver> struct operation : pop_waiter {
    buffer_queue& queue;
    Receiver receiver;
    std::optional<T> result;
    std::error_code ec;

    struct cancel_callback {
      operation& self;
      void operator()() noexcept {
        auto& cq = *self.sender.queue;
        unique_lock lock(cq.mutex);
        // After we acquired lock, the operation might have already completed
        // and was removed from the queue. Hence, try_remove.
        if (cq.waiters.try_remove(&self)) {
          lock.unlock();
          stdexec::set_stopped((Receiver&&)self->receiver);
        }
      }
    };

    operation(buffer_queue& queue, Receiver&& receiver)
        : pop_waiter(result, ec), queue(queue), receiver(std::move(receiver)) {
      this->complete = [](pop_waiter* w) noexcept {
        auto& op = *static_cast<operation*>(w);
        if (op.result) {
          STDEX_CONQUEUE_LOG("async_pop: resumed with lvalue: %d\n",
                             *op.result);
          stdexec::set_value((Receiver&&)op.receiver, std::move(*op.result));
        } else {
          STDEX_CONQUEUE_LOG("async_pop: resumed with error: %d\n",
                             op.ec.value());
          stdexec::set_error((Receiver&&)op.receiver,
                             make_exception_ptr(conqueue_error(op.ec)));
        }
      };
    }

    friend void tag_invoke(stdexec::start_t, operation& op) noexcept {
      auto& self = op.queue;
      std::unique_lock lock(self.mutex);
      // If the queue is empty, add ourselves to the waiters.
      if (self.queue.empty()) {
        // Unless, of course, the queue is closed, then return an error.
        if (self.closed) {
          lock.unlock();
          stdexec::set_error(
              (Receiver&&)op.receiver,
              make_exception_ptr(conqueue_error(conqueue_errc::closed)));
          return;
        }

        if (!self.push_waiters.empty()) {
          // Release a single pusher and take its value.
          assert(self.capacity() == 0);
          auto* waiter = self.push_waiters.pop_front();
          lock.unlock();
          if (auto* lval = waiter->lval) {
            STDEX_CONQUEUE_LOG(
                "async_pop: consuming directly from waiter %p. lvalue %d\n",
                waiter, *lval);
            stdexec::set_value((Receiver&&)op.receiver, std::move(*lval));
          } else {
            STDEX_CONQUEUE_LOG(
                "async_pop: consuming directly from waiter %p. rvalue %d\n",
                waiter, *waiter->rval);
            stdexec::set_value((Receiver&&)op.receiver, *waiter->rval);
          }
          STDEX_CONQUEUE_LOG("unlocking pusher %p\n", waiter);
          waiter->complete(waiter);
          return;
        }

        STDEX_CONQUEUE_LOG(
            "async_pop: queue is empty, putting %p in the waiters queue\n",
            &op);
        self.pop_waiters.push_back(&op);
        return;
      }

      T value = self.queue.pop_front();

      // See if there are any push waiters we can unblock.
      if (!self.push_waiters.empty()) {
        // Release a single pusher and put its value into the queue.
        auto* waiter = self.push_waiters.pop_front();
        if (auto* lval = waiter->lval)
          self.queue.push_back(std::move(*lval));
        else
          self.queue.push_back(*waiter->rval);
        lock.unlock();
        STDEX_CONQUEUE_LOG("async_pop: unlocking pusher %p\n", waiter);
        waiter->complete(waiter);
      } else {
        lock.unlock();
      }

      stdexec::set_value((Receiver&&)op.receiver, std::move(value));
    }
  };

  template <stdexec::receiver Receiver>
  friend auto tag_invoke(stdexec::connect_t, pop_sender&& s, Receiver&& r)
      -> operation<Receiver> {
    return {*s.queue, std::forward<Receiver>(r)};
  }
};

template <typename T, typename Alloc>
typename buffer_queue<T, Alloc>::pop_sender
buffer_queue<T, Alloc>::async_pop() noexcept {
  return {this};
}
} // namespace std::experimental

#endif // _STD_EXPERIMENTAL_CONQUEUE
